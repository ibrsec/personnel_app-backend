{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "personnelapi",
    "description": "Personnel management system api service version 1.0.0",
    "termsOfService": "http:127.0.0.1:1000",
    "contact": {
      "name": "ibrsec",
      "email": "qadir@clarusway.com"
    },
    "license": {
      "name": "ISC"
    }
  },
  "host": "personnel-app-backend.vercel.app",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apikey",
      "in": "header",
      "name": "Authorization",
      "description": "Simple Token Authentication * Example: <b>Token ...tokenKey...</b>"
    }
  },
  "paths": {
    "/departments/": {
      "get": {
        "tags": [
          "Departments"
        ],
        "summary": "List Departments",
        "description": "  You can send query with endpoint for search[], sort[], page and limit.  <ul> Examples:  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>  <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "url?filter[fieldName]=fieldValue",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "url?search[fieldName]=searchValue",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "url?sort[fieldName]=asc or desc",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination, page=2",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items per page, limit=25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items will be skipped, skip=25, - if page is provided then it is no need ",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Departments"
        ],
        "summary": "Create new Department",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "<ul> Description: name field is required!",
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/departments/{id}": {
      "get": {
        "tags": [
          "Departments"
        ],
        "summary": "Get a Department",
        "description": "Get a Department with id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Provide a id of a department(objectId)"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Departments"
        ],
        "summary": "Update Department",
        "description": "  Update a department  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Provide a id of a department(objectId)"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "<ul> Description: name field is required!:",
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Departments"
        ],
        "summary": "Delete a Department",
        "description": "Delete a Department with id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Provide a id of a department(objectId)"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/departments/{id}/personnels": {
      "get": {
        "tags": [
          "Departments"
        ],
        "summary": "List the Personnels of a Departments",
        "description": "  You can send query with endpoint for search[], sort[], page and limit.  <ul> Examples:  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>  <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "url?filter[fieldName]=fieldValue",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "url?search[fieldName]=searchValue",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "url?sort[fieldName]=asc or desc",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination, page=2",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items per page, limit=25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items will be skipped, skip=25, - if page is provided then it is no need ",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/personnels/": {
      "get": {
        "tags": [
          "Personnels"
        ],
        "summary": "List Personnels",
        "description": "  You can send query with endpoint for search[], sort[], page and limit.  <ul> Examples:  <li>URL/?<b>filter[field1]=value1&filter[field2]=value2</b></li>  <li>URL/?<b>search[field1]=value1&search[field2]=value2</b></li>  <li>URL/?<b>sort[field1]=1&sort[field2]=-1</b></li>  <li>URL/?<b>page=2&limit=1</b></li>  </ul>  ",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "url?filter[fieldName]=fieldValue",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "url?search[fieldName]=searchValue",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "url?sort[fieldName]=asc or desc",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination, page=2",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items per page, limit=25",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items will be skipped, skip=25, - if page is provided then it is no need ",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Personnels"
        ],
        "summary": "Create new Personnel",
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "<ul> Description: departmentId,username,password,firstName,lastName, phone, email, title fields are required! Other ones optional -> salary,description,isAdmin,isLead,isActive,startedAt,adminkey!:  <li><b>For admin modification a correct adminkey field is required!</b></li>  <li><b>Creating a lead personnel of a department, converts old lead of asked department to a normal user!</b></li>  <li><b>Password length should be 4 to 16</b></li>  </ul>  ",
            "schema": {
              "$ref": "#/definitions/Personnel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/personnels/{id}": {
      "get": {
        "tags": [
          "Personnels"
        ],
        "summary": "Get a Personnel",
        "description": "Get a Personnel with id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Provide a id of a personnel(objectId)"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Personnels"
        ],
        "summary": "Update a Personnel",
        "description": "  Update personnel  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Provide a id of a personnel(objectId)"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "<ul> Description: departmentId,username,password,firstName,lastName, phone, email, title fields are required! Other ones optional -> salary,description,isAdmin,isLead,isActive,startedAt,adminkey!:  <li><b>For admin modification a correct adminkey field is required!</b></li>  <li><b>Updating a user to a lead personnel of a department, converts old lead of asked department to a normal user!</b></li>   <li><b>Password length should be 4 to 16</b></li>  </ul>  ",
            "schema": {
              "$ref": "#/definitions/Personnel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      },
      "delete": {
        "tags": [
          "Personnels"
        ],
        "summary": "Delete a Personnel",
        "description": "Delete a Personnel with id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Provide a id of a personnel(objectId)"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": [
          "Personnels"
        ],
        "summary": "Partial update Personnel",
        "description": "  Partial update Personnel  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Provide a id of a personnel(objectId)"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "<ul> Description: At least one of the departmentId,username,password,firstName,lastName, phone, email, title, salary,description,isAdmin,isLead,isActive,startedAt is required!:  <li><b>For admin modification a correct adminkey field is required!</b></li>  <li><b>Updating a user to a lead personnel of a department, converts old lead of asked department to a normal user!</b></li>  <li><b>Password length should be 4 to 16</b></li>  </ul>  ",
            "schema": {
              "$ref": "#/definitions/Personnel"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login with credentials",
        "description": "Login with valid username and password!       <li><b>Password length should be 4 to 16</b></li>",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example": "*String"
                },
                "password": {
                  "type": "string",
                  "example": "*String"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout with token or without token!",
        "description": "If user provide a valid token, it will be deleted, but if user doesn't just user will logout!!",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user",
        "description": "If user provide a valid token -> user id will be returned!!",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "Department": {
      "type": "object",
      "properties": {
        "name": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 100
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "Personnel": {
      "type": "object",
      "properties": {
        "departmentId": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "ref": {
              "type": "string",
              "example": "Department"
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "username": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 100
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "password": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "set": {
              "type": "function"
            },
            "validate": {
              "type": "function"
            }
          }
        },
        "firstName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 100
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "lastName": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 100
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "phone": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "minLength": {
              "type": "number",
              "example": 1
            },
            "maxLength": {
              "type": "number",
              "example": 11
            },
            "match": {
              "type": "object",
              "properties": {}
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "email": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 100
            },
            "unique": {
              "type": "boolean",
              "example": true
            },
            "match": {
              "type": "object",
              "properties": {}
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "title": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 100
            },
            "required": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "salary": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "required": {
              "type": "boolean",
              "example": true
            },
            "max": {
              "type": "number",
              "example": 1000000
            },
            "min": {
              "type": "number",
              "example": 0
            },
            "default": {
              "type": "number",
              "example": 0
            }
          }
        },
        "description": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "trim": {
              "type": "boolean",
              "example": true
            },
            "maxLength": {
              "type": "number",
              "example": 1000
            },
            "default": {}
          }
        },
        "isAdmin": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isLead": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "isActive": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "startedAt": {
          "type": "object",
          "properties": {
            "type": {
              "type": "function"
            },
            "default": {
              "type": "number",
              "example": 1722262310949
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    }
  ]
}